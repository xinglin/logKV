/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LogKeyValue_H
#define LogKeyValue_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "RPC_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class LogKeyValueIf {
 public:
  virtual ~LogKeyValueIf() {}
  virtual void Put(Response& _return, const std::string& key, const std::string& value) = 0;
  virtual void Get(Response& _return, const std::string& key) = 0;
  virtual void Delete(Response& _return, const std::string& key) = 0;
  virtual void Exist(Response& _return, const std::string& key) = 0;
};

class LogKeyValueIfFactory {
 public:
  typedef LogKeyValueIf Handler;

  virtual ~LogKeyValueIfFactory() {}

  virtual LogKeyValueIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LogKeyValueIf* /* handler */) = 0;
};

class LogKeyValueIfSingletonFactory : virtual public LogKeyValueIfFactory {
 public:
  LogKeyValueIfSingletonFactory(const ::std::shared_ptr<LogKeyValueIf>& iface) : iface_(iface) {}
  virtual ~LogKeyValueIfSingletonFactory() {}

  virtual LogKeyValueIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LogKeyValueIf* /* handler */) {}

 protected:
  ::std::shared_ptr<LogKeyValueIf> iface_;
};

class LogKeyValueNull : virtual public LogKeyValueIf {
 public:
  virtual ~LogKeyValueNull() {}
  void Put(Response& /* _return */, const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void Get(Response& /* _return */, const std::string& /* key */) {
    return;
  }
  void Delete(Response& /* _return */, const std::string& /* key */) {
    return;
  }
  void Exist(Response& /* _return */, const std::string& /* key */) {
    return;
  }
};

typedef struct _LogKeyValue_Put_args__isset {
  _LogKeyValue_Put_args__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _LogKeyValue_Put_args__isset;

class LogKeyValue_Put_args {
 public:

  LogKeyValue_Put_args(const LogKeyValue_Put_args&);
  LogKeyValue_Put_args& operator=(const LogKeyValue_Put_args&);
  LogKeyValue_Put_args() : key(), value() {
  }

  virtual ~LogKeyValue_Put_args() noexcept;
  std::string key;
  std::string value;

  _LogKeyValue_Put_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const LogKeyValue_Put_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const LogKeyValue_Put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogKeyValue_Put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogKeyValue_Put_pargs {
 public:


  virtual ~LogKeyValue_Put_pargs() noexcept;
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogKeyValue_Put_result__isset {
  _LogKeyValue_Put_result__isset() : success(false) {}
  bool success :1;
} _LogKeyValue_Put_result__isset;

class LogKeyValue_Put_result {
 public:

  LogKeyValue_Put_result(const LogKeyValue_Put_result&);
  LogKeyValue_Put_result& operator=(const LogKeyValue_Put_result&);
  LogKeyValue_Put_result() {
  }

  virtual ~LogKeyValue_Put_result() noexcept;
  Response success;

  _LogKeyValue_Put_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const LogKeyValue_Put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LogKeyValue_Put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogKeyValue_Put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogKeyValue_Put_presult__isset {
  _LogKeyValue_Put_presult__isset() : success(false) {}
  bool success :1;
} _LogKeyValue_Put_presult__isset;

class LogKeyValue_Put_presult {
 public:


  virtual ~LogKeyValue_Put_presult() noexcept;
  Response* success;

  _LogKeyValue_Put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LogKeyValue_Get_args__isset {
  _LogKeyValue_Get_args__isset() : key(false) {}
  bool key :1;
} _LogKeyValue_Get_args__isset;

class LogKeyValue_Get_args {
 public:

  LogKeyValue_Get_args(const LogKeyValue_Get_args&);
  LogKeyValue_Get_args& operator=(const LogKeyValue_Get_args&);
  LogKeyValue_Get_args() : key() {
  }

  virtual ~LogKeyValue_Get_args() noexcept;
  std::string key;

  _LogKeyValue_Get_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const LogKeyValue_Get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const LogKeyValue_Get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogKeyValue_Get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogKeyValue_Get_pargs {
 public:


  virtual ~LogKeyValue_Get_pargs() noexcept;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogKeyValue_Get_result__isset {
  _LogKeyValue_Get_result__isset() : success(false) {}
  bool success :1;
} _LogKeyValue_Get_result__isset;

class LogKeyValue_Get_result {
 public:

  LogKeyValue_Get_result(const LogKeyValue_Get_result&);
  LogKeyValue_Get_result& operator=(const LogKeyValue_Get_result&);
  LogKeyValue_Get_result() {
  }

  virtual ~LogKeyValue_Get_result() noexcept;
  Response success;

  _LogKeyValue_Get_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const LogKeyValue_Get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LogKeyValue_Get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogKeyValue_Get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogKeyValue_Get_presult__isset {
  _LogKeyValue_Get_presult__isset() : success(false) {}
  bool success :1;
} _LogKeyValue_Get_presult__isset;

class LogKeyValue_Get_presult {
 public:


  virtual ~LogKeyValue_Get_presult() noexcept;
  Response* success;

  _LogKeyValue_Get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LogKeyValue_Delete_args__isset {
  _LogKeyValue_Delete_args__isset() : key(false) {}
  bool key :1;
} _LogKeyValue_Delete_args__isset;

class LogKeyValue_Delete_args {
 public:

  LogKeyValue_Delete_args(const LogKeyValue_Delete_args&);
  LogKeyValue_Delete_args& operator=(const LogKeyValue_Delete_args&);
  LogKeyValue_Delete_args() : key() {
  }

  virtual ~LogKeyValue_Delete_args() noexcept;
  std::string key;

  _LogKeyValue_Delete_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const LogKeyValue_Delete_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const LogKeyValue_Delete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogKeyValue_Delete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogKeyValue_Delete_pargs {
 public:


  virtual ~LogKeyValue_Delete_pargs() noexcept;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogKeyValue_Delete_result__isset {
  _LogKeyValue_Delete_result__isset() : success(false) {}
  bool success :1;
} _LogKeyValue_Delete_result__isset;

class LogKeyValue_Delete_result {
 public:

  LogKeyValue_Delete_result(const LogKeyValue_Delete_result&);
  LogKeyValue_Delete_result& operator=(const LogKeyValue_Delete_result&);
  LogKeyValue_Delete_result() {
  }

  virtual ~LogKeyValue_Delete_result() noexcept;
  Response success;

  _LogKeyValue_Delete_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const LogKeyValue_Delete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LogKeyValue_Delete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogKeyValue_Delete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogKeyValue_Delete_presult__isset {
  _LogKeyValue_Delete_presult__isset() : success(false) {}
  bool success :1;
} _LogKeyValue_Delete_presult__isset;

class LogKeyValue_Delete_presult {
 public:


  virtual ~LogKeyValue_Delete_presult() noexcept;
  Response* success;

  _LogKeyValue_Delete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LogKeyValue_Exist_args__isset {
  _LogKeyValue_Exist_args__isset() : key(false) {}
  bool key :1;
} _LogKeyValue_Exist_args__isset;

class LogKeyValue_Exist_args {
 public:

  LogKeyValue_Exist_args(const LogKeyValue_Exist_args&);
  LogKeyValue_Exist_args& operator=(const LogKeyValue_Exist_args&);
  LogKeyValue_Exist_args() : key() {
  }

  virtual ~LogKeyValue_Exist_args() noexcept;
  std::string key;

  _LogKeyValue_Exist_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const LogKeyValue_Exist_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const LogKeyValue_Exist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogKeyValue_Exist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogKeyValue_Exist_pargs {
 public:


  virtual ~LogKeyValue_Exist_pargs() noexcept;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogKeyValue_Exist_result__isset {
  _LogKeyValue_Exist_result__isset() : success(false) {}
  bool success :1;
} _LogKeyValue_Exist_result__isset;

class LogKeyValue_Exist_result {
 public:

  LogKeyValue_Exist_result(const LogKeyValue_Exist_result&);
  LogKeyValue_Exist_result& operator=(const LogKeyValue_Exist_result&);
  LogKeyValue_Exist_result() {
  }

  virtual ~LogKeyValue_Exist_result() noexcept;
  Response success;

  _LogKeyValue_Exist_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const LogKeyValue_Exist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LogKeyValue_Exist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogKeyValue_Exist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogKeyValue_Exist_presult__isset {
  _LogKeyValue_Exist_presult__isset() : success(false) {}
  bool success :1;
} _LogKeyValue_Exist_presult__isset;

class LogKeyValue_Exist_presult {
 public:


  virtual ~LogKeyValue_Exist_presult() noexcept;
  Response* success;

  _LogKeyValue_Exist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LogKeyValueClient : virtual public LogKeyValueIf {
 public:
  LogKeyValueClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LogKeyValueClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Put(Response& _return, const std::string& key, const std::string& value);
  void send_Put(const std::string& key, const std::string& value);
  void recv_Put(Response& _return);
  void Get(Response& _return, const std::string& key);
  void send_Get(const std::string& key);
  void recv_Get(Response& _return);
  void Delete(Response& _return, const std::string& key);
  void send_Delete(const std::string& key);
  void recv_Delete(Response& _return);
  void Exist(Response& _return, const std::string& key);
  void send_Exist(const std::string& key);
  void recv_Exist(Response& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LogKeyValueProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<LogKeyValueIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LogKeyValueProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Exist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LogKeyValueProcessor(::std::shared_ptr<LogKeyValueIf> iface) :
    iface_(iface) {
    processMap_["Put"] = &LogKeyValueProcessor::process_Put;
    processMap_["Get"] = &LogKeyValueProcessor::process_Get;
    processMap_["Delete"] = &LogKeyValueProcessor::process_Delete;
    processMap_["Exist"] = &LogKeyValueProcessor::process_Exist;
  }

  virtual ~LogKeyValueProcessor() {}
};

class LogKeyValueProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LogKeyValueProcessorFactory(const ::std::shared_ptr< LogKeyValueIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< LogKeyValueIfFactory > handlerFactory_;
};

class LogKeyValueMultiface : virtual public LogKeyValueIf {
 public:
  LogKeyValueMultiface(std::vector<std::shared_ptr<LogKeyValueIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LogKeyValueMultiface() {}
 protected:
  std::vector<std::shared_ptr<LogKeyValueIf> > ifaces_;
  LogKeyValueMultiface() {}
  void add(::std::shared_ptr<LogKeyValueIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Put(Response& _return, const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Put(_return, key, value);
    }
    ifaces_[i]->Put(_return, key, value);
    return;
  }

  void Get(Response& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Get(_return, key);
    }
    ifaces_[i]->Get(_return, key);
    return;
  }

  void Delete(Response& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Delete(_return, key);
    }
    ifaces_[i]->Delete(_return, key);
    return;
  }

  void Exist(Response& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Exist(_return, key);
    }
    ifaces_[i]->Exist(_return, key);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class LogKeyValueConcurrentClient : virtual public LogKeyValueIf {
 public:
  LogKeyValueConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  LogKeyValueConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Put(Response& _return, const std::string& key, const std::string& value);
  int32_t send_Put(const std::string& key, const std::string& value);
  void recv_Put(Response& _return, const int32_t seqid);
  void Get(Response& _return, const std::string& key);
  int32_t send_Get(const std::string& key);
  void recv_Get(Response& _return, const int32_t seqid);
  void Delete(Response& _return, const std::string& key);
  int32_t send_Delete(const std::string& key);
  void recv_Delete(Response& _return, const int32_t seqid);
  void Exist(Response& _return, const std::string& key);
  int32_t send_Exist(const std::string& key);
  void recv_Exist(Response& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
